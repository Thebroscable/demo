---
openapi: 3.0.0
info:
  title: Book management system
  version: 1.0.0
  description: Demo application to manage books
tags:
  - name: Book
paths:
  /book/{bookId}:
    delete:
      description: Delete a book in the system
      operationId: deleteBook
      parameters:
        - in: path
          name: bookId
          description: ID of the book to be deleted
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully deleted the book
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    put:
      description: Update a book in the system and returns the ID of the updated book
      operationId: updateBook
      parameters:
        - in: path
          name: bookId
          description: ID of the book to be updated
          required: true
          schema:
            type: integer
            format:  int64
      requestBody:
        description: The book details to be updated
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Successfully updated the book
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: ID of the book
                example: 12345
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Book with this ISBN already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      description: Get a book from the system
      operationId: getBook
      parameters:
        - in: path
          name: bookId
          description: ID of the book to be fetched
          required: true
          schema:
            type: integer
            format: int64
      responses:
        '200':
          description: Successfully fetched the book
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BookResponse'
        '404':
          description: Book not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
  /book/:
    post:
      description: Creates a new book in the system and returns the ID of the created book
      operationId: createBook
      requestBody:
        description: The book to be created
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BookRequest'
      responses:
        '200':
          description: Successfully created the book
          content:
            application/json:
              schema:
                type: integer
                format: int64
                description: ID of the book
                example: 12345
        '400':
          description: Bad request - invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
        '409':
          description: Book with this ISBN already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiError'
    get:
      description: Search for books using title, author, publisher, or ISBN.
      operationId: searchBooks
      parameters:
        - in: query
          name: page
          description: The page number to retrieve (default is 0)
          required: false
          schema:
            type: integer
            default: 0
        - in: query
          name: size
          description: The number of books per page (default is 10)
          required: false
          schema:
            type: integer
            default: 10
        - in: query
          name: searchText
          description: Search text for filtering books by title, author, publisher, or ISBN
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Found books based on search criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PaginatedBookResponse'
components:
  schemas:
    ApiError:
      type: object
      properties:
        timestamp:
          type: string
          format: date-time
          example: "2025-02-16T14:35:22"
          description: "Timestamp when the error occurred"
        error:
          type: string
          example: "Bad Request"
          description: "Short description of the error type"
        message:
          type: string
          example: "Invalid request format"
          description: "Detailed error message"
        details:
          type: object
          description: "Additional details about the error"
        status:
          type: integer
          example: 400
          description: "HTTP status code"
        path:
          type: string
          example: "/book/"
          description: "Path of the request that caused the error"
    BookRequest:
      type: object
      properties:
        title:
          type: string
          maxLength: 255
          description: Title of the book
          example: The Great Gatsby
        author:
          type: string
          maxLength: 255
          description: Author of the book
          example: F. Scott Fitzgerald
        publisher:
          type: string
          maxLength: 255
          description: Publisher of the book
          example: Scribner
        isbn:
          type: string
          pattern: '^[0-9]{13}$'
          description: ISBN number of the book
          example: 9780743273565
        pages:
          type: integer
          format: int32
          description: Number of pages
          example: 180
        releaseDate:
          type: string
          format: date
          description: Release date of the book
        language:
          type: string
          maxLength: 50
          description: Language of the book
          example: English
        description:
          type: string
          description: Detailed description of the book
          example: A novel set in the Jazz Age that tells the story of Jay Gatsby and his love for Daisy Buchanan
      required:
        - title
        - author
        - publisher
    BookResponse:
      allOf:
        - $ref: '#/components/schemas/BookRequest'
        - type: object
          properties:
            id:
              type: integer
              format: int64
              description: Unique identifier for the book
              example: 1
    PaginatedBookResponse:
      type: object
      properties:
        totalElements:
          type: integer
          format: int64
          example: 9007199254740991
        totalPages:
          type: integer
          format: int32
          example: 1073741824
        size:
          type: integer
          format: int32
          example: 1073741824
        content:
          type: array
          items:
            $ref: '#/components/schemas/BookResponse'
        number:
          type: integer
          format: int32
          example: 1073741824
        sort:
          $ref: '#/components/schemas/Sort'
        numberOfElements:
          type: integer
          format: int32
          example: 1073741824
        first:
          type: boolean
          example: true
        last:
          type: boolean
          example: true
        empty:
          type: boolean
          example: true
    Sort:
      type: object
      properties:
        empty:
          type: boolean
          example: true
        sorted:
          type: boolean
          example: true
        unsorted:
          type: boolean
          example: true